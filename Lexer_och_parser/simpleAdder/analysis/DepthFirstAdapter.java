/* This file was generated by SableCC (http://www.sablecc.org/). */

package simpleAdder.analysis;

import java.util.*;
import simpleAdder.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        {
            List<PLol> copy = new ArrayList<PLol>(node.getLol());
            for(PLol e : copy)
            {
                e.apply(this);
            }
        }
        outAProgram(node);
    }

    public void inALol(ALol node)
    {
        defaultIn(node);
    }

    public void outALol(ALol node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALol(ALol node)
    {
        inALol(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        {
            List<PTemp> copy = new ArrayList<PTemp>(node.getTemp());
            for(PTemp e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getLinestuff() != null)
        {
            node.getLinestuff().apply(this);
        }
        outALol(node);
    }

    public void inATemp(ATemp node)
    {
        defaultIn(node);
    }

    public void outATemp(ATemp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATemp(ATemp node)
    {
        inATemp(node);
        if(node.getOp() != null)
        {
            node.getOp().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outATemp(node);
    }
}
