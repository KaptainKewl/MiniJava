/* This file was generated by SableCC (http://www.sablecc.org/). */

package simpleAdder.node;

import java.util.*;
import simpleAdder.analysis.*;

@SuppressWarnings("nls")
public final class ALol extends PLol
{
    private TInteger _integer_;
    private final LinkedList<PTemp> _temp_ = new LinkedList<PTemp>();
    private TSemi _semi_;
    private TLinestuff _linestuff_;

    public ALol()
    {
        // Constructor
    }

    public ALol(
        @SuppressWarnings("hiding") TInteger _integer_,
        @SuppressWarnings("hiding") List<PTemp> _temp_,
        @SuppressWarnings("hiding") TSemi _semi_,
        @SuppressWarnings("hiding") TLinestuff _linestuff_)
    {
        // Constructor
        setInteger(_integer_);

        setTemp(_temp_);

        setSemi(_semi_);

        setLinestuff(_linestuff_);

    }

    @Override
    public Object clone()
    {
        return new ALol(
            cloneNode(this._integer_),
            cloneList(this._temp_),
            cloneNode(this._semi_),
            cloneNode(this._linestuff_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALol(this);
    }

    public TInteger getInteger()
    {
        return this._integer_;
    }

    public void setInteger(TInteger node)
    {
        if(this._integer_ != null)
        {
            this._integer_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._integer_ = node;
    }

    public LinkedList<PTemp> getTemp()
    {
        return this._temp_;
    }

    public void setTemp(List<PTemp> list)
    {
        this._temp_.clear();
        this._temp_.addAll(list);
        for(PTemp e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TSemi getSemi()
    {
        return this._semi_;
    }

    public void setSemi(TSemi node)
    {
        if(this._semi_ != null)
        {
            this._semi_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semi_ = node;
    }

    public TLinestuff getLinestuff()
    {
        return this._linestuff_;
    }

    public void setLinestuff(TLinestuff node)
    {
        if(this._linestuff_ != null)
        {
            this._linestuff_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._linestuff_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._integer_)
            + toString(this._temp_)
            + toString(this._semi_)
            + toString(this._linestuff_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._integer_ == child)
        {
            this._integer_ = null;
            return;
        }

        if(this._temp_.remove(child))
        {
            return;
        }

        if(this._semi_ == child)
        {
            this._semi_ = null;
            return;
        }

        if(this._linestuff_ == child)
        {
            this._linestuff_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._integer_ == oldChild)
        {
            setInteger((TInteger) newChild);
            return;
        }

        for(ListIterator<PTemp> i = this._temp_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PTemp) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._semi_ == oldChild)
        {
            setSemi((TSemi) newChild);
            return;
        }

        if(this._linestuff_ == oldChild)
        {
            setLinestuff((TLinestuff) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
